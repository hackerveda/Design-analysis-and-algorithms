#include<iostream>
using namespace std;
static int ne,nv;
int f,t,weight;
int d[50][50];
int pi[50][50];
void init()
{
    for(int i=1;i<=nv;i++)
    {
        for(int j=1;j<=nv;j++)
        {
            if(i==j)
            {
                d[i][j]=0;
            }
            else
            {
                d[i][j]=9999;
            }
        }
    }
   
}
void floydwar()
{
    for(int k=1;k<=nv;k++)
    {
        for(int i=1;i<=nv;i++)
          {
            for(int j=1;j<=nv;j++)
              {    
                  if(d[i][j]>d[i][k]+d[k][j])
                  {
                      d[i][j]=d[i][k]+d[k][j];
                      pi[i][j]=pi[k][j];
                  }
              }
          }
    }
}
void printwar()
{
    for(int i=1;i<=nv;i++)
    {
        for(int j=1;j<=nv;j++)
        {
            cout<<d[i][j]<<"            ";
        }
        cout<<endl;
    }
    for(int i=1;i<=nv;i++)
    {
        for(int j=1;j<=nv;j++)
        {
            cout<<pi[i][j]<<"           ";
        }
        cout<<endl;
    }
}
void priordis(int i,int j)
{
    if(i==j)
    {
        cout<<i<<"      "<<endl;
        return;
    }
    if(pi[i][j]==-1)
    {
        cout<<"No route for your priority distance.";
    }
    else
    {
        priordis(i,pi[i][j]);
        cout<<j<<"   ";
    }
}
int main()
{
    cout<<"Enter the number of vertices and edges: ";
    cin>>nv>>ne;
    init();
    for(int i=1;i<=ne;i++)
    {
        cout<<"Enter the edge "<<i;
        cin>>f>>t;
        cout<<"Enter the weight of the edge: ";
        cin>>weight;
        d[f][t]=weight;
    }
    for(int i=1;i<=nv;i++)
    {
        for(int j=1;j<=nv;j++)
        {
            if(d[i][j]==9999||i==j)
            {
                pi[i][j]=-1;
            }
            else
            {
                pi[i][j]=i;
            }
        }
    }
    floydwar();
    printwar();
    cout<<"Enter the priority distance: ";
    cin>>f>>t;
    priordis(f,t);
    return 0;
}